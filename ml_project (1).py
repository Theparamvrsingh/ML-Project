# -*- coding: utf-8 -*-
"""ML Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UStcVPT-JtojH6xAX09Zmf8Qz-LlnUQk

Importing the Dependencies
"""

!pip install googletrans==4.0.0-rc1
!pip install streamlit
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.metrics import accuracy_score
from googletrans import Translator
import pandas as pd
import streamlit as st

"""Data Collection and Pre-Processing

"""

from google.colab import files
uploaded = files.upload()

raw_mail_data = pd.read_csv('mail_data.csv')

import os
print(os.getcwd())

print(raw_mail_data)

#Now i will replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

#Now printing the first 5 rows of the dataframe
mail_data.head()

#Checking the number of rows and columns in the dataframe
mail_data.shape

"""Label Encoding"""

#Labelling spam mails as 0 and ham mails as 1

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category'] = 1

"""spam:0     and      ham:1"""

#Separating the data as texts and label
X = mail_data['Message']
Y = mail_data['Category']

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# Transform the text data to feature vectors
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

# Fit and transform training data, then transform test data
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Encode Y_train and Y_test labels
label_encoder = LabelEncoder()
Y_train = label_encoder.fit_transform(Y_train)
Y_test = label_encoder.transform(Y_test)

print(X_train)

print(X_train_features)

"""Training the model using Logistic Regression"""

model1 = LogisticRegression()
model2 = RandomForestClassifier(n_estimators=100, random_state=3)
model3 = GradientBoostingClassifier(n_estimators=100, random_state=3)

"""Create an ensemble model using VotingClassifier"""

ensemble_model = VotingClassifier(estimators=[
    ('lr', model1),
    ('rf', model2),
    ('gb', model3)
], voting='hard')

"""Train the ensemble model"""

ensemble_model.fit(X_train_features, Y_train)

"""Evaluating the trained model"""

# prediction on training data

train_predictions = ensemble_model.predict(X_train_features)
train_accuracy = accuracy_score(Y_train, train_predictions)
print('Training Accuracy:', train_accuracy)

# Calculate accuracy on training data
train_predictions = ensemble_model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, train_predictions)
print('Accuracy on training data:', accuracy_on_training_data)

# Calculate accuracy on test data
test_predictions = ensemble_model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, test_predictions)
print('Accuracy on test data:', accuracy_on_test_data)

print('Accuracy on training data : ', accuracy_on_training_data)

# prediction on test data

test_predictions = ensemble_model.predict(X_test_features)
test_accuracy = accuracy_score(Y_test, test_predictions)
print('Test Accuracy:', test_accuracy)

print('Accuracy on test data : ', accuracy_on_test_data)

"""Initialize Google Translator"""

translator = Translator()

"""Function to handle translation and prediction"""

def translate_and_predict(email_text):
    # Detect and translate to English if not already
    detection = translator.detect(email_text)
    if detection.lang != 'en':
        email_text = translator.translate(email_text, dest='en').text

    # Convert the email text to features
    features = feature_extraction.transform([email_text])
    prediction = ensemble_model.predict(features)[0]

    return 'Ham' if prediction == 1 else 'Spam'

"""Streamlit deployment for interactive classification"""

st.title("Spam Detection Tool")

"""Input field for email text"""

input_email = st.text_area("Enter the email content to classify:")

"""Button to classify"""

if st.button("Classify"):
    result = translate_and_predict(input_email)
    st.write(f'The email is classified as: **{result}**')